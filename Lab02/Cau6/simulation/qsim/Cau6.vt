// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2023 00:02:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Cau6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Cau6_vlg_sample_tst(
	clk,
	rst,
	swh,
	swm,
	sws,
	sampler_tx
);
input  clk;
input  rst;
input [4:0] swh;
input [5:0] swm;
input [5:0] sws;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or swh or swm or sws)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Cau6_vlg_check_tst (
	H,
	M,
	S,
	count_enable,
	error,
	sampler_rx
);
input [4:0] H;
input [5:0] M;
input [5:0] S;
input  count_enable;
input  error;
input sampler_rx;

reg [4:0] H_expected;
reg [5:0] M_expected;
reg [5:0] S_expected;
reg  count_enable_expected;
reg  error_expected;

reg [4:0] H_prev;
reg [5:0] M_prev;
reg [5:0] S_prev;
reg  count_enable_prev;
reg  error_prev;

reg [4:0] H_expected_prev;
reg [5:0] M_expected_prev;
reg [5:0] S_expected_prev;
reg  count_enable_expected_prev;
reg  error_expected_prev;

reg [4:0] last_H_exp;
reg [5:0] last_M_exp;
reg [5:0] last_S_exp;
reg  last_count_enable_exp;
reg  last_error_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	H_prev = H;
	M_prev = M;
	S_prev = S;
	count_enable_prev = count_enable;
	error_prev = error;
end

// update expected /o prevs

always @(trigger)
begin
	H_expected_prev = H_expected;
	M_expected_prev = M_expected;
	S_expected_prev = S_expected;
	count_enable_expected_prev = count_enable_expected;
	error_expected_prev = error_expected;
end


// expected H[ 4 ]
initial
begin
	H_expected[4] = 1'bX;
end 
// expected H[ 3 ]
initial
begin
	H_expected[3] = 1'bX;
end 
// expected H[ 2 ]
initial
begin
	H_expected[2] = 1'bX;
end 
// expected H[ 1 ]
initial
begin
	H_expected[1] = 1'bX;
end 
// expected H[ 0 ]
initial
begin
	H_expected[0] = 1'bX;
end 
// expected M[ 5 ]
initial
begin
	M_expected[5] = 1'bX;
end 
// expected M[ 4 ]
initial
begin
	M_expected[4] = 1'bX;
end 
// expected M[ 3 ]
initial
begin
	M_expected[3] = 1'bX;
end 
// expected M[ 2 ]
initial
begin
	M_expected[2] = 1'bX;
end 
// expected M[ 1 ]
initial
begin
	M_expected[1] = 1'bX;
end 
// expected M[ 0 ]
initial
begin
	M_expected[0] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 

// expected error
initial
begin
	error_expected = 1'bX;
end 

// expected count_enable
initial
begin
	count_enable_expected = 1'bX;
end 
// generate trigger
always @(H_expected or H or M_expected or M or S_expected or S or count_enable_expected or count_enable or error_expected or error)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected H = %b | expected M = %b | expected S = %b | expected count_enable = %b | expected error = %b | ",H_expected_prev,M_expected_prev,S_expected_prev,count_enable_expected_prev,error_expected_prev);
	$display("| real H = %b | real M = %b | real S = %b | real count_enable = %b | real error = %b | ",H_prev,M_prev,S_prev,count_enable_prev,error_prev);
`endif
	if (
		( H_expected_prev[0] !== 1'bx ) && ( H_prev[0] !== H_expected_prev[0] )
		&& ((H_expected_prev[0] !== last_H_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[0] = H_expected_prev[0];
	end
	if (
		( H_expected_prev[1] !== 1'bx ) && ( H_prev[1] !== H_expected_prev[1] )
		&& ((H_expected_prev[1] !== last_H_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[1] = H_expected_prev[1];
	end
	if (
		( H_expected_prev[2] !== 1'bx ) && ( H_prev[2] !== H_expected_prev[2] )
		&& ((H_expected_prev[2] !== last_H_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[2] = H_expected_prev[2];
	end
	if (
		( H_expected_prev[3] !== 1'bx ) && ( H_prev[3] !== H_expected_prev[3] )
		&& ((H_expected_prev[3] !== last_H_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[3] = H_expected_prev[3];
	end
	if (
		( H_expected_prev[4] !== 1'bx ) && ( H_prev[4] !== H_expected_prev[4] )
		&& ((H_expected_prev[4] !== last_H_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[4] = H_expected_prev[4];
	end
	if (
		( M_expected_prev[0] !== 1'bx ) && ( M_prev[0] !== M_expected_prev[0] )
		&& ((M_expected_prev[0] !== last_M_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[0] = M_expected_prev[0];
	end
	if (
		( M_expected_prev[1] !== 1'bx ) && ( M_prev[1] !== M_expected_prev[1] )
		&& ((M_expected_prev[1] !== last_M_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[1] = M_expected_prev[1];
	end
	if (
		( M_expected_prev[2] !== 1'bx ) && ( M_prev[2] !== M_expected_prev[2] )
		&& ((M_expected_prev[2] !== last_M_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[2] = M_expected_prev[2];
	end
	if (
		( M_expected_prev[3] !== 1'bx ) && ( M_prev[3] !== M_expected_prev[3] )
		&& ((M_expected_prev[3] !== last_M_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[3] = M_expected_prev[3];
	end
	if (
		( M_expected_prev[4] !== 1'bx ) && ( M_prev[4] !== M_expected_prev[4] )
		&& ((M_expected_prev[4] !== last_M_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[4] = M_expected_prev[4];
	end
	if (
		( M_expected_prev[5] !== 1'bx ) && ( M_prev[5] !== M_expected_prev[5] )
		&& ((M_expected_prev[5] !== last_M_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp[5] = M_expected_prev[5];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( count_enable_expected_prev !== 1'bx ) && ( count_enable_prev !== count_enable_expected_prev )
		&& ((count_enable_expected_prev !== last_count_enable_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_enable_expected_prev);
		$display ("     Real value = %b", count_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_enable_exp = count_enable_expected_prev;
	end
	if (
		( error_expected_prev !== 1'bx ) && ( error_prev !== error_expected_prev )
		&& ((error_expected_prev !== last_error_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", error_expected_prev);
		$display ("     Real value = %b", error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_error_exp = error_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Cau6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg [4:0] swh;
reg [5:0] swm;
reg [5:0] sws;
// wires                                               
wire [4:0] H;
wire [5:0] M;
wire [5:0] S;
wire count_enable;
wire error;

wire sampler;                             

// assign statements (if any)                          
Cau6 i1 (
// port map - connection between master ports and signals/registers   
	.H(H),
	.M(M),
	.S(S),
	.clk(clk),
	.count_enable(count_enable),
	.error(error),
	.rst(rst),
	.swh(swh),
	.swm(swm),
	.sws(sws)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// rst
initial
begin
	rst = 1'b0;
end 
// swh[ 4 ]
initial
begin
	swh[4] = 1'b0;
end 
// swh[ 3 ]
initial
begin
	swh[3] = 1'b0;
end 
// swh[ 2 ]
initial
begin
	swh[2] = 1'b0;
end 
// swh[ 1 ]
initial
begin
	swh[1] = 1'b0;
end 
// swh[ 0 ]
initial
begin
	swh[0] = 1'b0;
end 
// swm[ 5 ]
initial
begin
	swm[5] = 1'b0;
	swm[5] = #480000 1'b1;
	swm[5] = #50000 1'b0;
end 
// swm[ 4 ]
initial
begin
	swm[4] = 1'b0;
end 
// swm[ 3 ]
initial
begin
	swm[3] = 1'b0;
	swm[3] = #480000 1'b1;
	swm[3] = #50000 1'b0;
end 
// swm[ 2 ]
initial
begin
	swm[2] = 1'b0;
end 
// swm[ 1 ]
initial
begin
	swm[1] = 1'b0;
	swm[1] = #480000 1'b1;
	swm[1] = #50000 1'b0;
end 
// swm[ 0 ]
initial
begin
	swm[0] = 1'b0;
	swm[0] = #480000 1'b1;
	swm[0] = #50000 1'b0;
end 
// sws[ 5 ]
initial
begin
	sws[5] = 1'b0;
	sws[5] = #410000 1'b1;
	sws[5] = #20000 1'b0;
end 
// sws[ 4 ]
initial
begin
	sws[4] = 1'b0;
	sws[4] = #410000 1'b1;
	sws[4] = #20000 1'b0;
end 
// sws[ 3 ]
initial
begin
	sws[3] = 1'b0;
	sws[3] = #410000 1'b1;
	sws[3] = #20000 1'b0;
end 
// sws[ 2 ]
initial
begin
	sws[2] = 1'b0;
	sws[2] = #410000 1'b1;
	sws[2] = #20000 1'b0;
end 
// sws[ 1 ]
initial
begin
	sws[1] = 1'b0;
end 
// sws[ 0 ]
initial
begin
	sws[0] = 1'b0;
	sws[0] = #410000 1'b1;
	sws[0] = #20000 1'b0;
end 

Cau6_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.swh(swh),
	.swm(swm),
	.sws(sws),
	.sampler_tx(sampler)
);

Cau6_vlg_check_tst tb_out(
	.H(H),
	.M(M),
	.S(S),
	.count_enable(count_enable),
	.error(error),
	.sampler_rx(sampler)
);
endmodule

